package com.bridgelabz.fundoo.notes.controller;
import java.util.List;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.bridgelabz.fundoo.notes.dto.NotesDto;

import com.bridgelabz.fundoo.notes.model.Note;
import com.bridgelabz.fundoo.notes.service.NoteService;
import com.bridgelabz.fundoo.response.Response;
@CrossOrigin(allowedHeaders = "*", origins = "*")
@RestController
@RequestMapping("/notes")
public class NotesController {
	
	@Autowired
	private NoteService noteService;
	
	@PostMapping("/create")
	public ResponseEntity<Response> createNote(@RequestBody NotesDto notesDto) {
//		String token =  noteService.getToken(emailId);
//		System.out.println(token);
		Response responseStatus = noteService.onCrete(notesDto);
		return new ResponseEntity<Response>(responseStatus, HttpStatus.OK);
	}
	

	@PutMapping("/update")
	public ResponseEntity<Response> updateNote(@RequestBody NotesDto notesDto, String userId,@RequestParam Long noteId) {
//		String token =  noteService.getTokenByuserId(userId);
//		System.out.println(token);
		Response responseStatus = noteService.update(notesDto, noteId);
		return new ResponseEntity<Response>(responseStatus, HttpStatus.OK);
	}
		
	@PutMapping("/permanetdelete")
	public ResponseEntity<Response>permanentdeletNote(@RequestHeader String emailId, @RequestParam long noteId)
	{
//		String token =  noteService.getToken(emailId);
		Response responseStatus=noteService.permanentdelete(noteId);
		return new ResponseEntity<Response>(responseStatus,HttpStatus.OK);
	}


	///
	@PutMapping("/trash")
	public ResponseEntity<Response> trash(@RequestHeader String emailId, @RequestParam long noteId) {
		Response responseStatus = noteService.trash(noteId);
		return new ResponseEntity<Response>(responseStatus, HttpStatus.OK);
	}

	@PutMapping("/pin")
	public ResponseEntity<Response> pin(@RequestParam long noteId) {
		Response responseStatus = noteService.pin(noteId);
		return new ResponseEntity<Response>(responseStatus, HttpStatus.OK);
	}
	
	@PutMapping("/archive")
	public ResponseEntity<Response> archive(@RequestParam long noteId) {
		Response responseStatus = noteService.archive(noteId);
		return new ResponseEntity<Response>(responseStatus, HttpStatus.OK);
	}
	@GetMapping("/getAllNotes")
	public List<Note> getAllNotes(@RequestHeader String emailId) {
		List<Note>listNotes=noteService.getAllNotes();
		return listNotes;
	}
	
	@GetMapping("/getAllArchive")
	public List<NotesDto> getPinnedNotes(@RequestHeader String token) {
		List<NotesDto>listNotes=noteService.getAllArchive(token);
		return listNotes;
	}
	@GetMapping("/getAllTrash")
	public List<NotesDto> getAllTrash(@RequestHeader String token)
	{
		List<NotesDto>listNotes=noteService.getAllTrash(token);
		return listNotes;
	}
	
	@GetMapping("/getAllPinedNotes")
	public List<NotesDto> getAllPinedNotes(@RequestHeader String token)
	{
		List<NotesDto>listNotes=noteService.getAllPinedNotes(token);
		return listNotes;
	}
	
	
	
		
//	@GetMapping("/getArchieve")
//	public List<Note> getArchieveNotes(@RequestHeader String token) {
//		List<Note> listnotes = noteService.getArchievedNote(token);
//		return listnotes;
//	}
//	@PutMapping("/unarchive")
//	public ResponseEntity<Response>unarchive(@RequestHeader String token,@RequestParam long noteId)
//	{
//		Response responseStatus=noteService.unarchive(token, noteId);
//		return new ResponseEntity<Response>(responseStatus,HttpStatus.OK);	
//	}
//	@PutMapping("/colour")
//	public ResponseEntity<Response>noteColour(@RequestHeader String token,@RequestParam long noteId)
//	{
//		Response responseStatus = noteService.setColour(token,noteId);
//		System.out.println("response--->"+responseStatus);
//		return new ResponseEntity<Response>(responseStatus, HttpStatus.OK);			
//	}
	
	@PutMapping("/color")
	public ResponseEntity<Response>noteColor(@RequestHeader String token,@RequestParam long noteId, String color )
	{
		Response responseStatus =noteService.setColor(token,noteId,color);
		return new ResponseEntity<Response>(responseStatus, HttpStatus.OK);
	}
	
	
}

